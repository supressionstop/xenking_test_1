// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: lines.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lines_SubscribeOnSportsLines_FullMethodName = "/lines.Lines/SubscribeOnSportsLines"
)

// LinesClient is the client API for Lines service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinesClient interface {
	SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Subscribe, LinesData], error)
}

type linesClient struct {
	cc grpc.ClientConnInterface
}

func NewLinesClient(cc grpc.ClientConnInterface) LinesClient {
	return &linesClient{cc}
}

func (c *linesClient) SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Subscribe, LinesData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Lines_ServiceDesc.Streams[0], Lines_SubscribeOnSportsLines_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Subscribe, LinesData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Lines_SubscribeOnSportsLinesClient = grpc.BidiStreamingClient[Subscribe, LinesData]

// LinesServer is the server API for Lines service.
// All implementations must embed UnimplementedLinesServer
// for forward compatibility.
type LinesServer interface {
	SubscribeOnSportsLines(grpc.BidiStreamingServer[Subscribe, LinesData]) error
	mustEmbedUnimplementedLinesServer()
}

// UnimplementedLinesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinesServer struct{}

func (UnimplementedLinesServer) SubscribeOnSportsLines(grpc.BidiStreamingServer[Subscribe, LinesData]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportsLines not implemented")
}
func (UnimplementedLinesServer) mustEmbedUnimplementedLinesServer() {}
func (UnimplementedLinesServer) testEmbeddedByValue()               {}

// UnsafeLinesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinesServer will
// result in compilation errors.
type UnsafeLinesServer interface {
	mustEmbedUnimplementedLinesServer()
}

func RegisterLinesServer(s grpc.ServiceRegistrar, srv LinesServer) {
	// If the following call pancis, it indicates UnimplementedLinesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lines_ServiceDesc, srv)
}

func _Lines_SubscribeOnSportsLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinesServer).SubscribeOnSportsLines(&grpc.GenericServerStream[Subscribe, LinesData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Lines_SubscribeOnSportsLinesServer = grpc.BidiStreamingServer[Subscribe, LinesData]

// Lines_ServiceDesc is the grpc.ServiceDesc for Lines service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lines_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lines.Lines",
	HandlerType: (*LinesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportsLines",
			Handler:       _Lines_SubscribeOnSportsLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lines.proto",
}
