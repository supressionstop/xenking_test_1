run:
  concurrency: 4
  timeout: 10s
  tests: true
  allow-parallel-runners: true
  go: '1.23'
output:
  sort-results: true
  sort-order:
    - file
    - linter
    - severity
  show-stats: true
issues:
  exclude-rules:
    - path: cmd/
      linters:
        - cyclop
linters:
  enable:
    - errcheck # Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.
    - gosimple # Linter for Go source code that specializes in simplifying code.
    - govet # Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes.
    - ineffassign # Detects when assignments to existing variables are not used.
    - staticcheck # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    - unused # Checks Go code for unused constants, variables, functions and types.
    - asasalint # Check for pass []any as any in variadic func(...any).
    - asciicheck # Checks that all code identifiers does not have non-ASCII symbols in the name.
    - bidichk # Checks for dangerous unicode character sequences.
    - bodyclose # Checks whether HTTP response body is closed successfully.
    - canonicalheader # Canonicalheader checks whether net/http.Header uses canonical header.
    - containedctx  # Containedctx is a linter that detects struct contained context.Context field.
    - contextcheck  # Check whether the function uses a non-inherited context.
    - copyloopvar  # Copyloopvar is a linter detects places where loop variables are copied.
    - cyclop  # Checks function and package cyclomatic complexity.
    - decorder # Check declaration order and count of types, constants, variables and functions.
    - dupl # Tool for code clone detection.
    - errcheck # Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and reports occations, where the check for the returned error can be omitted.
    - errorlint # Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
linters-settings:
  cyclop:
    max-complexity: 10
    skip-tests: true
  errcheck:
    check-type-assertions: true
    check-blank: true
  errchkjson:
    report-no-exported: true
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    errorf: true
    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)
    errorf-multi: false
    # Check for plain type assertions and type switches.
    asserts: true
    # Check for plain error comparisons.
    comparison: true
    # Allowed errors.
    allowed-errors: []
    # Allowed error "wildcards".
    allowed-errors-wildcard: []