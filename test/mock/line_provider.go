// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/supressionstop/xenking_test_1/internal/usecase/dto"
)

// LineProvider is an autogenerated mock type for the LineProvider type
type LineProvider struct {
	mock.Mock
}

type LineProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *LineProvider) EXPECT() *LineProvider_Expecter {
	return &LineProvider_Expecter{mock: &_m.Mock}
}

// GetLine provides a mock function with given fields: ctx, sport
func (_m *LineProvider) GetLine(ctx context.Context, sport string) (dto.ProviderLine, error) {
	ret := _m.Called(ctx, sport)

	if len(ret) == 0 {
		panic("no return value specified for GetLine")
	}

	var r0 dto.ProviderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.ProviderLine, error)); ok {
		return rf(ctx, sport)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.ProviderLine); ok {
		r0 = rf(ctx, sport)
	} else {
		r0 = ret.Get(0).(dto.ProviderLine)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LineProvider_GetLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLine'
type LineProvider_GetLine_Call struct {
	*mock.Call
}

// GetLine is a helper method to define mock.On call
//   - ctx context.Context
//   - sport string
func (_e *LineProvider_Expecter) GetLine(ctx interface{}, sport interface{}) *LineProvider_GetLine_Call {
	return &LineProvider_GetLine_Call{Call: _e.mock.On("GetLine", ctx, sport)}
}

func (_c *LineProvider_GetLine_Call) Run(run func(ctx context.Context, sport string)) *LineProvider_GetLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LineProvider_GetLine_Call) Return(_a0 dto.ProviderLine, _a1 error) *LineProvider_GetLine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LineProvider_GetLine_Call) RunAndReturn(run func(context.Context, string) (dto.ProviderLine, error)) *LineProvider_GetLine_Call {
	_c.Call.Return(run)
	return _c
}

// NewLineProvider creates a new instance of LineProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLineProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *LineProvider {
	mock := &LineProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
