// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LineChecker is an autogenerated mock type for the LineChecker type
type LineChecker struct {
	mock.Mock
}

type LineChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *LineChecker) EXPECT() *LineChecker_Expecter {
	return &LineChecker_Expecter{mock: &_m.Mock}
}

// IsSynced provides a mock function with given fields:
func (_m *LineChecker) IsSynced() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSynced")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LineChecker_IsSynced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSynced'
type LineChecker_IsSynced_Call struct {
	*mock.Call
}

// IsSynced is a helper method to define mock.On call
func (_e *LineChecker_Expecter) IsSynced() *LineChecker_IsSynced_Call {
	return &LineChecker_IsSynced_Call{Call: _e.mock.On("IsSynced")}
}

func (_c *LineChecker_IsSynced_Call) Run(run func()) *LineChecker_IsSynced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LineChecker_IsSynced_Call) Return(_a0 bool) *LineChecker_IsSynced_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LineChecker_IsSynced_Call) RunAndReturn(run func() bool) *LineChecker_IsSynced_Call {
	_c.Call.Return(run)
	return _c
}

// NewLineChecker creates a new instance of LineChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLineChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *LineChecker {
	mock := &LineChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
