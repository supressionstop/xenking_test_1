// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/supressionstop/xenking_test_1/internal/usecase/entity"
)

// CalculateDiff is an autogenerated mock type for the CalculateDiff type
type CalculateDiff struct {
	mock.Mock
}

type CalculateDiff_Expecter struct {
	mock *mock.Mock
}

func (_m *CalculateDiff) EXPECT() *CalculateDiff_Expecter {
	return &CalculateDiff_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: prev, curr
func (_m *CalculateDiff) Execute(prev entity.LineMap, curr entity.LineMap) (entity.LinesDiff, error) {
	ret := _m.Called(prev, curr)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 entity.LinesDiff
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.LineMap, entity.LineMap) (entity.LinesDiff, error)); ok {
		return rf(prev, curr)
	}
	if rf, ok := ret.Get(0).(func(entity.LineMap, entity.LineMap) entity.LinesDiff); ok {
		r0 = rf(prev, curr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.LinesDiff)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.LineMap, entity.LineMap) error); ok {
		r1 = rf(prev, curr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateDiff_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CalculateDiff_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - prev entity.LineMap
//   - curr entity.LineMap
func (_e *CalculateDiff_Expecter) Execute(prev interface{}, curr interface{}) *CalculateDiff_Execute_Call {
	return &CalculateDiff_Execute_Call{Call: _e.mock.On("Execute", prev, curr)}
}

func (_c *CalculateDiff_Execute_Call) Run(run func(prev entity.LineMap, curr entity.LineMap)) *CalculateDiff_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.LineMap), args[1].(entity.LineMap))
	})
	return _c
}

func (_c *CalculateDiff_Execute_Call) Return(_a0 entity.LinesDiff, _a1 error) *CalculateDiff_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CalculateDiff_Execute_Call) RunAndReturn(run func(entity.LineMap, entity.LineMap) (entity.LinesDiff, error)) *CalculateDiff_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCalculateDiff creates a new instance of CalculateDiff. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalculateDiff(t interface {
	mock.TestingT
	Cleanup(func())
}) *CalculateDiff {
	mock := &CalculateDiff{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
